{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "THE PRECIOUS CODE WITH THE TOOLS IN IT.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "pje370vqKtyd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "necYMhKyLZMU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df=pd.read_csv(\"trr.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gXKiIVG3yyU6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "outputId": "ecf72416-a2f9-453b-f026-2d55fadb090f"
      },
      "source": [
        "df.head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Moran, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330877</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>McCarthy, Mr. Timothy J</td>\n",
              "      <td>male</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17463</td>\n",
              "      <td>51.8625</td>\n",
              "      <td>E46</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Palsson, Master. Gosta Leonard</td>\n",
              "      <td>male</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>349909</td>\n",
              "      <td>21.0750</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
              "      <td>female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>347742</td>\n",
              "      <td>11.1333</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
              "      <td>female</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>237736</td>\n",
              "      <td>30.0708</td>\n",
              "      <td>NaN</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0            1         0       3  ...   7.2500   NaN         S\n",
              "1            2         1       1  ...  71.2833   C85         C\n",
              "2            3         1       3  ...   7.9250   NaN         S\n",
              "3            4         1       1  ...  53.1000  C123         S\n",
              "4            5         0       3  ...   8.0500   NaN         S\n",
              "5            6         0       3  ...   8.4583   NaN         Q\n",
              "6            7         0       1  ...  51.8625   E46         S\n",
              "7            8         0       3  ...  21.0750   NaN         S\n",
              "8            9         1       3  ...  11.1333   NaN         S\n",
              "9           10         1       2  ...  30.0708   NaN         C\n",
              "\n",
              "[10 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xuavwqxBy1qr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "fb28530c-ea55-4ae4-b0f2-e95d59bab555"
      },
      "source": [
        "df.corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.005007</td>\n",
              "      <td>-0.035144</td>\n",
              "      <td>0.036847</td>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.012658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>-0.005007</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>-0.077221</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.257307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>-0.035144</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.369226</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.549500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.036847</td>\n",
              "      <td>-0.077221</td>\n",
              "      <td>-0.369226</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.308247</td>\n",
              "      <td>-0.189119</td>\n",
              "      <td>0.096067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>-0.308247</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>0.159651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.189119</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.216225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0.012658</td>\n",
              "      <td>0.257307</td>\n",
              "      <td>-0.549500</td>\n",
              "      <td>0.096067</td>\n",
              "      <td>0.159651</td>\n",
              "      <td>0.216225</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             PassengerId  Survived    Pclass  ...     SibSp     Parch      Fare\n",
              "PassengerId     1.000000 -0.005007 -0.035144  ... -0.057527 -0.001652  0.012658\n",
              "Survived       -0.005007  1.000000 -0.338481  ... -0.035322  0.081629  0.257307\n",
              "Pclass         -0.035144 -0.338481  1.000000  ...  0.083081  0.018443 -0.549500\n",
              "Age             0.036847 -0.077221 -0.369226  ... -0.308247 -0.189119  0.096067\n",
              "SibSp          -0.057527 -0.035322  0.083081  ...  1.000000  0.414838  0.159651\n",
              "Parch          -0.001652  0.081629  0.018443  ...  0.414838  1.000000  0.216225\n",
              "Fare            0.012658  0.257307 -0.549500  ...  0.159651  0.216225  1.000000\n",
              "\n",
              "[7 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8wysaJFXLSkc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 249
        },
        "outputId": "094638f7-deac-4158-94ef-49122d86f8e8"
      },
      "source": [
        "#CHECKING FOR MISSING VALUES\n",
        "import missingno as msno\n",
        "msno.matrix(df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-7d9bca606902>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#CHECKING FOR MISSING VALUES\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmissingno\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmsno\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmsno\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C0IcKn34aWe8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "'''\n",
        "code for removing rows with null values\n",
        "pdf = pdf[pd.notnull(pdf[\"column name\"])]\n",
        "pdf = pdf.reset_index(drop=True)\n",
        "pdf.head(5)\n",
        "'''"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kduFQWoesLl3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "80382fe5-9943-4a1e-a9ed-015aabfc82ea"
      },
      "source": [
        "#DATA VISUALIZATION\n",
        "#sns.set_style('whitegrid')\n",
        "sns.countplot(x='Survived',data=df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcced0b00>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NIg3Jl0QsLc_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "b5fce4fd-bcf6-4f7a-9f16-f304d5f4e214"
      },
      "source": [
        "sns.countplot(x='Survived',hue='Sex',data=df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bccb9ca90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p_hlD3RMy_as",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "99ad84bd-6cc6-4cc9-ff5e-bca43971c113"
      },
      "source": [
        "sns.countplot(x='Survived',hue='SibSp',data=df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcd9529e8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4uV8nhf7sLV2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "87ac5815-60ae-4e1b-c01f-07baefdddb32"
      },
      "source": [
        "sns.countplot(x='Survived',hue='Pclass',data=df)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcbccbbe0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jyEl8FD5sLOm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "d7325227-8646-4079-fc18-28dedcfe3fe5"
      },
      "source": [
        "sns.boxplot(x='Pclass',y='Age',data=df)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcbbf50b8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rpsWRnOmznwV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "e9b48146-6be1-4a98-be52-9be0b707e7b3"
      },
      "source": [
        "sns.countplot(x='Survived',hue='Parch',data=df)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcaf59ba8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2wu58sVYxl44",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "outputId": "5a0bb6ff-7704-4b9e-dbba-8c26c0432d18"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.scatter(df['Age'],df['Survived'])\n",
        "plt.title(\"dist\")\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Survived')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Survived')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s7MX90RxLd9k",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "5767c2da-2ead-4d07-c679-8118de84cc8c"
      },
      "source": [
        "#df[\"SibSp\"].value_counts()\n",
        "df.head(15)\n",
        "df['Pclass'].isnull().value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    891\n",
              "Name: Pclass, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UxZNo45_cpya",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 774
        },
        "outputId": "8946671a-730c-4c5e-e945-d6a94690b926"
      },
      "source": [
        "#USING HEATMAP TO SEE FOR MISSING VALUES\n",
        "msno.heatmap(df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcd8f4c88>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x864 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pLe5tveDerQI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "80ba395c-2cdd-4ed2-e412-8fba8080f019"
      },
      "source": [
        "#DEALING WITH MISSING VALUE\n",
        "sns.boxplot(x='male',y='Survived',data=df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcd993320>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CseDT_zVo5ZK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "outputId": "9c77f9ea-47ee-4d1d-c8da-1f26f817f53f"
      },
      "source": [
        "'''\n",
        "CODE FOR ACCESSING EACH ROW OF A EACH COLUMN IN A DATA FRAME\n",
        "\n",
        "for col in df.index:\n",
        "  if(df['Pclass'][col]==3):\n",
        "     df['Survived'][col]=0\n",
        "df[['Pclass','Survived']].head(10)\n",
        "'''    "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Pclass  Survived\n",
              "0       3         0\n",
              "1       1         1\n",
              "2       3         0\n",
              "3       1         1\n",
              "4       3         0\n",
              "5       3         0\n",
              "6       1         0\n",
              "7       3         0\n",
              "8       3         0\n",
              "9       2         1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "14HnLDe3nFSQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "outputId": "c00d270c-beb7-4ecd-8e1d-c5571d9e9d18"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.scatter(df['Age'],df['Pclass'])\n",
        "plt.title(\"dist\")\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Pclass')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Pclass')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p4aM-6aJdBFR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "a2861181-b03f-4da6-e2ce-d4f1f66e835b"
      },
      "source": [
        "#CHECKING SKEWNESS OF DATA\n",
        "import seaborn as sns \n",
        "df['Age'].hist(bins=30,color='red',alpha=0.5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8bcc5e26a0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GOcFMuLQfp36",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#FILLING MISSING VALUES USING REGRESSION\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "lr=LinearRegression()\n",
        "df2=df[['Age','Pclass']]\n",
        "df2['Age'].dropna(axis=0,inplace=True)  #DROPPING THE CLOUMNS WITH NAN FOR TRAINING THE MODEL\n",
        "lr.fit(df2[['Pclass']],df2['Age'])\n",
        "y=lr.predict(df[['Pclass']])\n",
        "y = pd.DataFrame(data=y,columns=[\"Pclass\"])\n",
        "df3['Age'].replace(np.nan,0,inplace=True)\n",
        "for col in df3.index:\n",
        "  if(df3['Age'][col]==0):\n",
        "     df3['Age'][col]=df3['Pclass'][col]\n",
        "df3['Age'].head(10)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gnyikEpexIjP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "b0079d98-79b4-4cbf-9051-0e862958773b"
      },
      "source": [
        "df[\"Age\"].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    22.000000\n",
              "1    38.000000\n",
              "2    26.000000\n",
              "3    35.000000\n",
              "4    35.000000\n",
              "5    24.815091\n",
              "6    54.000000\n",
              "7     2.000000\n",
              "8    27.000000\n",
              "9    14.000000\n",
              "Name: Age, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HleSYhmBNnHK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "outputId": "4cdf67c6-84e9-4a2e-9bff-92a58d94faf8"
      },
      "source": [
        "df.corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.005007</td>\n",
              "      <td>-0.035144</td>\n",
              "      <td>0.035327</td>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.012658</td>\n",
              "      <td>-0.042939</td>\n",
              "      <td>0.042939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.005007</td>\n",
              "      <td>-0.035144</td>\n",
              "      <td>0.035327</td>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.012658</td>\n",
              "      <td>-0.042939</td>\n",
              "      <td>0.042939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>-0.005007</td>\n",
              "      <td>-0.005007</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>-0.049774</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.257307</td>\n",
              "      <td>0.543351</td>\n",
              "      <td>-0.543351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>-0.035144</td>\n",
              "      <td>-0.035144</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.404828</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.549500</td>\n",
              "      <td>-0.131900</td>\n",
              "      <td>0.131900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.035327</td>\n",
              "      <td>0.035327</td>\n",
              "      <td>-0.049774</td>\n",
              "      <td>-0.404828</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.244080</td>\n",
              "      <td>-0.174935</td>\n",
              "      <td>0.120651</td>\n",
              "      <td>-0.080368</td>\n",
              "      <td>0.080368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>-0.244080</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>0.159651</td>\n",
              "      <td>0.114631</td>\n",
              "      <td>-0.114631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>-0.001652</td>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.174935</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.216225</td>\n",
              "      <td>0.245489</td>\n",
              "      <td>-0.245489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0.012658</td>\n",
              "      <td>0.012658</td>\n",
              "      <td>0.257307</td>\n",
              "      <td>-0.549500</td>\n",
              "      <td>0.120651</td>\n",
              "      <td>0.159651</td>\n",
              "      <td>0.216225</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.182333</td>\n",
              "      <td>-0.182333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>-0.042939</td>\n",
              "      <td>-0.042939</td>\n",
              "      <td>0.543351</td>\n",
              "      <td>-0.131900</td>\n",
              "      <td>-0.080368</td>\n",
              "      <td>0.114631</td>\n",
              "      <td>0.245489</td>\n",
              "      <td>0.182333</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>0.042939</td>\n",
              "      <td>0.042939</td>\n",
              "      <td>-0.543351</td>\n",
              "      <td>0.131900</td>\n",
              "      <td>0.080368</td>\n",
              "      <td>-0.114631</td>\n",
              "      <td>-0.245489</td>\n",
              "      <td>-0.182333</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             Unnamed: 0  PassengerId  Survived  ...      Fare    female      male\n",
              "Unnamed: 0     1.000000     1.000000 -0.005007  ...  0.012658 -0.042939  0.042939\n",
              "PassengerId    1.000000     1.000000 -0.005007  ...  0.012658 -0.042939  0.042939\n",
              "Survived      -0.005007    -0.005007  1.000000  ...  0.257307  0.543351 -0.543351\n",
              "Pclass        -0.035144    -0.035144 -0.338481  ... -0.549500 -0.131900  0.131900\n",
              "Age            0.035327     0.035327 -0.049774  ...  0.120651 -0.080368  0.080368\n",
              "SibSp         -0.057527    -0.057527 -0.035322  ...  0.159651  0.114631 -0.114631\n",
              "Parch         -0.001652    -0.001652  0.081629  ...  0.216225  0.245489 -0.245489\n",
              "Fare           0.012658     0.012658  0.257307  ...  1.000000  0.182333 -0.182333\n",
              "female        -0.042939    -0.042939  0.543351  ...  0.182333  1.000000 -1.000000\n",
              "male           0.042939     0.042939 -0.543351  ... -0.182333 -1.000000  1.000000\n",
              "\n",
              "[10 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jSKg-y1pPDcD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "0122672d-f7a7-454e-9ffe-e195e6c159a9"
      },
      "source": [
        "#dummy_variable_1 = pd.get_dummies(df[\"Sex\"])\n",
        "#dummy_variable_1.head()\n",
        "dummy_variable_1 = pd.get_dummies(df[\"Embarked\"])\n",
        "dummy_variable_1.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>C</th>\n",
              "      <th>Q</th>\n",
              "      <th>S</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   C  Q  S\n",
              "0  0  0  1\n",
              "1  1  0  0\n",
              "2  0  0  1\n",
              "3  0  0  1\n",
              "4  0  0  1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "46NqK09lZ-zT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "10c033ac-62ed-42f8-dc9c-2f2dde86661d"
      },
      "source": [
        "dummy_variable_1.rename(columns={'C':'c', 'Q':'q','S':'s'}, inplace=True)\n",
        "dummy_variable_1.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>c</th>\n",
              "      <th>q</th>\n",
              "      <th>s</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   c  q  s\n",
              "0  0  0  1\n",
              "1  1  0  0\n",
              "2  0  0  1\n",
              "3  0  0  1\n",
              "4  0  0  1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8FAp7INwaL66",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# merge data frame \"df\" and \"dummy_variable_1\" \n",
        "df = pd.concat([df, dummy_variable_1], axis=1)\n",
        "\n",
        "# drop original column \"fuel-type\" from \"df\"\n",
        "df.drop(\"Embarked\", axis = 1, inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LUC4kVSoaWtC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "dc5d6ba7-dd71-4c69-c63f-85f497866f5d"
      },
      "source": [
        "\n",
        "df.to_csv(\"train.csv\")\n",
        "df.head(6)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "      <th>c</th>\n",
              "      <th>q</th>\n",
              "      <th>s</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Moran, Mr. James</td>\n",
              "      <td>24.815091</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330877</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Unnamed: 0  PassengerId  Survived  Pclass  ... male  c  q  s\n",
              "0           0            1         0       3  ...    1  0  0  1\n",
              "1           1            2         1       1  ...    0  1  0  0\n",
              "2           2            3         1       3  ...    0  0  0  1\n",
              "3           3            4         1       1  ...    0  0  0  1\n",
              "4           4            5         0       3  ...    1  0  0  1\n",
              "5           5            6         0       3  ...    1  0  1  0\n",
              "\n",
              "[6 rows x 16 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c3hwZmGNes_x",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "fa9b09f0-f0e3-432c-ec29-71df2efbd073"
      },
      "source": [
        "#df['SibSp'].isnull().value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    891\n",
              "Name: SibSp, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qja1DidpaYGy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "outputId": "02773bf4-ccaf-4c1c-d016-72cc93fa6dac"
      },
      "source": [
        "df.corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "      <th>c</th>\n",
              "      <th>q</th>\n",
              "      <th>s</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.005007</td>\n",
              "      <td>-0.035144</td>\n",
              "      <td>0.036847</td>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.012658</td>\n",
              "      <td>-0.042939</td>\n",
              "      <td>0.042939</td>\n",
              "      <td>-0.001205</td>\n",
              "      <td>-0.033606</td>\n",
              "      <td>0.022148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>-0.005007</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>-0.077221</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.257307</td>\n",
              "      <td>0.543351</td>\n",
              "      <td>-0.543351</td>\n",
              "      <td>0.168240</td>\n",
              "      <td>0.003650</td>\n",
              "      <td>-0.155660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>-0.035144</td>\n",
              "      <td>-0.338481</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.369226</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.549500</td>\n",
              "      <td>-0.131900</td>\n",
              "      <td>0.131900</td>\n",
              "      <td>-0.243292</td>\n",
              "      <td>0.221009</td>\n",
              "      <td>0.081720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.036847</td>\n",
              "      <td>-0.077221</td>\n",
              "      <td>-0.369226</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.308247</td>\n",
              "      <td>-0.189119</td>\n",
              "      <td>0.096067</td>\n",
              "      <td>-0.093254</td>\n",
              "      <td>0.093254</td>\n",
              "      <td>0.036261</td>\n",
              "      <td>-0.022405</td>\n",
              "      <td>-0.032523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>-0.057527</td>\n",
              "      <td>-0.035322</td>\n",
              "      <td>0.083081</td>\n",
              "      <td>-0.308247</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>0.159651</td>\n",
              "      <td>0.114631</td>\n",
              "      <td>-0.114631</td>\n",
              "      <td>-0.059528</td>\n",
              "      <td>-0.026354</td>\n",
              "      <td>0.070941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>-0.001652</td>\n",
              "      <td>0.081629</td>\n",
              "      <td>0.018443</td>\n",
              "      <td>-0.189119</td>\n",
              "      <td>0.414838</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.216225</td>\n",
              "      <td>0.245489</td>\n",
              "      <td>-0.245489</td>\n",
              "      <td>-0.011069</td>\n",
              "      <td>-0.081228</td>\n",
              "      <td>0.063036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0.012658</td>\n",
              "      <td>0.257307</td>\n",
              "      <td>-0.549500</td>\n",
              "      <td>0.096067</td>\n",
              "      <td>0.159651</td>\n",
              "      <td>0.216225</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.182333</td>\n",
              "      <td>-0.182333</td>\n",
              "      <td>0.269335</td>\n",
              "      <td>-0.117216</td>\n",
              "      <td>-0.166603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>-0.042939</td>\n",
              "      <td>0.543351</td>\n",
              "      <td>-0.131900</td>\n",
              "      <td>-0.093254</td>\n",
              "      <td>0.114631</td>\n",
              "      <td>0.245489</td>\n",
              "      <td>0.182333</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.082853</td>\n",
              "      <td>0.074115</td>\n",
              "      <td>-0.125722</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>0.042939</td>\n",
              "      <td>-0.543351</td>\n",
              "      <td>0.131900</td>\n",
              "      <td>0.093254</td>\n",
              "      <td>-0.114631</td>\n",
              "      <td>-0.245489</td>\n",
              "      <td>-0.182333</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.082853</td>\n",
              "      <td>-0.074115</td>\n",
              "      <td>0.125722</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c</th>\n",
              "      <td>-0.001205</td>\n",
              "      <td>0.168240</td>\n",
              "      <td>-0.243292</td>\n",
              "      <td>0.036261</td>\n",
              "      <td>-0.059528</td>\n",
              "      <td>-0.011069</td>\n",
              "      <td>0.269335</td>\n",
              "      <td>0.082853</td>\n",
              "      <td>-0.082853</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.148258</td>\n",
              "      <td>-0.778359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>q</th>\n",
              "      <td>-0.033606</td>\n",
              "      <td>0.003650</td>\n",
              "      <td>0.221009</td>\n",
              "      <td>-0.022405</td>\n",
              "      <td>-0.026354</td>\n",
              "      <td>-0.081228</td>\n",
              "      <td>-0.117216</td>\n",
              "      <td>0.074115</td>\n",
              "      <td>-0.074115</td>\n",
              "      <td>-0.148258</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.496624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>s</th>\n",
              "      <td>0.022148</td>\n",
              "      <td>-0.155660</td>\n",
              "      <td>0.081720</td>\n",
              "      <td>-0.032523</td>\n",
              "      <td>0.070941</td>\n",
              "      <td>0.063036</td>\n",
              "      <td>-0.166603</td>\n",
              "      <td>-0.125722</td>\n",
              "      <td>0.125722</td>\n",
              "      <td>-0.778359</td>\n",
              "      <td>-0.496624</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             PassengerId  Survived    Pclass  ...         c         q         s\n",
              "PassengerId     1.000000 -0.005007 -0.035144  ... -0.001205 -0.033606  0.022148\n",
              "Survived       -0.005007  1.000000 -0.338481  ...  0.168240  0.003650 -0.155660\n",
              "Pclass         -0.035144 -0.338481  1.000000  ... -0.243292  0.221009  0.081720\n",
              "Age             0.036847 -0.077221 -0.369226  ...  0.036261 -0.022405 -0.032523\n",
              "SibSp          -0.057527 -0.035322  0.083081  ... -0.059528 -0.026354  0.070941\n",
              "Parch          -0.001652  0.081629  0.018443  ... -0.011069 -0.081228  0.063036\n",
              "Fare            0.012658  0.257307 -0.549500  ...  0.269335 -0.117216 -0.166603\n",
              "female         -0.042939  0.543351 -0.131900  ...  0.082853  0.074115 -0.125722\n",
              "male            0.042939 -0.543351  0.131900  ... -0.082853 -0.074115  0.125722\n",
              "c              -0.001205  0.168240 -0.243292  ...  1.000000 -0.148258 -0.778359\n",
              "q              -0.033606  0.003650  0.221009  ... -0.148258  1.000000 -0.496624\n",
              "s               0.022148 -0.155660  0.081720  ... -0.778359 -0.496624  1.000000\n",
              "\n",
              "[12 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KSGUfD_Jaa75",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "2de2290e-91ac-45f9-9f13-bfdf374bca74"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HEICLfDnbCSo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "2fd480c3-54c4-48fa-d261-ed667afab7a2"
      },
      "source": [
        "sns.regplot(x=\"Pclass\", y=\"Age\", data=df)\n",
        "plt.ylim(0,)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.0, 83.979)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fLKWvjqLeIXq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X = df[['Pclass','SibSp','Fare',\"male\",'female','c','s','Age','Parch']]\n",
        "Y = df['Survived']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y1cHygvXNSWC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#SOME MODELS EMPLOYED"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-x-njY2Tek4L",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4134a331-a102-4095-f091-2de4cde81b59"
      },
      "source": [
        "#RIDGECLASSIFIER\n",
        "from sklearn.linear_model import RidgeClassifier\n",
        "rc = RidgeClassifier().fit(X, Y)\n",
        "rc.score(X, Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.792368125701459"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A16QNyj6g70F",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "21121a29-9eea-4145-da41-e72881ee6836"
      },
      "source": [
        "#RIDGEREGRESSION\n",
        "from sklearn.linear_model import Ridge\n",
        "import numpy as np\n",
        "rr = Ridge(alpha=0.0001)\n",
        "rr.fit(X, Y)\n",
        "rr.score(X,Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.3741684443045994"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tECNL2AKhaJd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2fa7f24f-932b-4900-cf46-9ebd29f17c0c"
      },
      "source": [
        "#RANDOM FOREST\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "rf = RandomForestRegressor(n_estimators=20, random_state=0)\n",
        "rf.fit(X,Y)\n",
        "rf.score(X,Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.716017297440349"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rS-FHcDDh-fB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8145a47e-1fd3-4d16-f9bf-ff1ecf4e57b8"
      },
      "source": [
        "#KERNEL SVM\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.svm import SVC\n",
        "ksvm = make_pipeline(StandardScaler(), SVC(gamma='auto'))\n",
        "ksvm.fit(X,Y)\n",
        "ksvm.score(X,Y)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8428731762065096"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o69houdUns-X",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ffb22454-d47f-414f-c819-c566e4e72cd8"
      },
      "source": [
        "#GRADIENT BOOSTING CLASSIFIER\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "grc = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,max_depth=1, random_state=0).fit(X, Y)\n",
        "grc.score(X,Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8552188552188552"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PiY-Ka_GOkgi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ca074113-0015-4cb3-cf4f-16a8183266a1"
      },
      "source": [
        "#ADA BOOST \n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "ada= AdaBoostClassifier(n_estimators=100, random_state=0)\n",
        "ada.fit(X, Y)\n",
        "ada.score(X, Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8372615039281706"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_1JFHF-kQ8db",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e632f4c3-2379-43ef-dee6-c540041c4bfc"
      },
      "source": [
        "#K NEAREST NEIGHBOUR\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "knn = KNeighborsClassifier(n_neighbors=3)\n",
        "knn.fit(X, Y)\n",
        "knn.score(X, Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8361391694725028"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rYnR-craRef8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "9840527d-e3f9-4095-a6b2-17152a4b474e"
      },
      "source": [
        "#LOGISTIC REGRESSION\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "lr = LogisticRegression(random_state=0).fit(X, Y)\n",
        "lr.score(X,Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.792368125701459"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    }
  ]
}